#Maeda Hanafi
#AES-128 implementation
#Algorithm explanation and based off from: http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
import collections
import binascii
import numpy as np
np.set_printoptions(formatter={'int':hex})
import copy

DEBUG = True

# The key is a 16 byte arrray in hex
shared_key = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]

#input is a block of 128 bits
#Assume key is 128 bit
KEY_LEN = 128
INPUT_BLOCK_LEN = 128

#State contains four rows, where each row contains block_len/32 bytes 
#The State is where the cipher/inverse cipher operation occurs
#Nb is number columns in State
Nb = INPUT_BLOCK_LEN/32
#Nr is the number of rounds; with AES-128, it is 10 rounds
Nr = 10
#Nk is key length (words); with AES-128, it is 4
Nk = 4

#Substitution box, based on Rijndael S-box: https://en.wikipedia.org/wiki/Rijndael_S-box
invSBox = (
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

sBox = (
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)


#Needed for key expansion; taken from https://en.wikipedia.org/wiki/Rijndael_key_schedule 
Rcon = (
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
)

'''
**********************************************************************
				Input, output transform
**********************************************************************
'''
def input_to_State(input):
	State = [[0 for val in range(Nb)] for row in range(Nb)]

	byteIndex = 0
	for i, row in enumerate(State):
		for j, val in enumerate(row):
			State[j][i] = input[byteIndex]
			byteIndex +=1
	return State



def encrypt( x):

	State = input_to_State(x)	

	State = addRoundKey(State, expandedKey[0:Nb])

	for round in range(1, Nr):
		State = _subBytes(State)
		State = _shiftRows(State)
		State = mixColumns(State)
		State = addRoundKey(State, expandedKey[round*Nb:((round+1)*Nb-1)+1])

	State = _subBytes(State)
	State = _shiftRows(State)
	State = addRoundKey(State, expandedKey[Nr*Nb:(Nr+1)*Nb])

	cipherText = []

	for i in range(len(State)):
		for j in range(len(State[0])):
			cipherText.append(State[j][i])

	return cipherText



def decrypt( y): 
	State = [[0 for val in range(Nb)] for row in range(Nb)]

	byteIndex = 0
	for i, row in enumerate(State):
		for j, val in enumerate(row):
			State[j][i] = y[byteIndex]
			byteIndex +=1

	State = addRoundKey(State, expandedKey[Nr*Nb : ((Nr+1)*Nb-1)+1])

	for round in range(Nr-1,0, -1):
		State = invShiftRows(State)
		State = invSubBytes(State)
		State = addRoundKey(State, expandedKey[round*Nb:((round+1)*Nb-1)+1])
		State = inv_mix_columns(State)

	State = invShiftRows(State)
	State = invSubBytes(State)
	State = addRoundKey(State, expandedKey[0:Nb])

	cipherText = []

	for i in range(len(State)):
		for j in range(len(State[0])):
			cipherText.append(int(State[j][i]))

	return cipherText

'''
**********************************************************************
	Key expansion
**********************************************************************
'''
def expandKey( key, Nk):

	returnWords = [[] for val in range(Nb*(Nr+1))]
	temp = []
	i = 0
	while i < Nk:
		returnWords[i] = [key[4*i], key[(4*i)+1], key[(4*i)+2], key[(4*i)+3]]
		i +=1

	i = Nk
	while i < Nb * (Nr+1):
		temp = returnWords[i-1][:]
		if i % Nk == 0:


						temp = _subWord(_rot(temp))
						x = temp[:]
						x[0] = x[0] ^ Rcon[i/Nk]
						temp[0] = temp[0] ^ Rcon[i/Nk]

		elif Nk > 6 and i % Nk == 4:
						temp = _subWord(temp)
		returnWords[i] = _xorListsOfBytes(returnWords[i-Nk], temp)
		i += 1
	return returnWords

def _xorListsOfBytes( byteList1, byteList2):
	return [byteList1[i] ^ byteList2[i] for i in range(len(byteList2))]

'''
**********************************************************************
	Encryption and decryption Methods
**********************************************************************
'''
def addRoundKey( State, round): 
	newState = [[0 for val in row] for row in State]

	for i, row in enumerate(State):
		for j, val in enumerate(row):
			newState[j][i] = State[j][i] ^ round[i][j]

	return newState


def inv_mix_columns( State): 	
	State = copy.deepcopy(State)

	invColBox = [[14, 11 ,13, 9],
				[9, 14, 11, 13],
				[13, 9, 14, 11],
				[11, 13, 9, 14]]

	colOrderState = [[0 for val in row] for row in State ]

	for i in range(len(State)):
		for j in range(len(State[0])):
			colOrderState[j][i] = State[i][j]


	newState = [[0 for val in row] for row in State ]

def matrixMult(matrix1, array):
	returnArray = [0 for val in array]
	for i, row in enumerate(matrix1):
		for j, boxVal in enumerate(row):
			returnArray[i] = _mult(boxVal, array[j]) ^ returnArray[i]
	return returnArray


	for i, row in enumerate(colOrderState):
					newState[i] = matrixMult(invColBox, row)

	for i in range(len(State)):
					for j in range(len(State[0])):
									State[i][j] = newState[j][i]

	return State

def invShiftRows( State): 
	for rowNumber, row in enumerate(State):
		rowForRotate = collections.deque(row)
		rowForRotate.rotate(rowNumber)
		State[rowNumber] = list(rowForRotate)

	return State

def invSubBytes( State): 
	for i, row in enumerate(State):
		for j, value in enumerate(row):
			State[i][j] = invSBox[value]

	return State

def matrixMult(matrix1, array):
	returnArray = [0 for val in array]
	for i, row in enumerate(matrix1):
		for j, boxVal in enumerate(row):
			returnArray[i] = _mult(boxVal, array[j]) ^ returnArray[i]

	return returnArray

def mixColumns( State): 
	State = copy.deepcopy(State)

	colBox = [[2,3,1,1],
			[1,2,3,1],
			[1,1,2,3],
			[3,1,1,2]]

	rowMajorState = [[0 for val in row] for row in State ]

	for i in range(len(State)):
		for j in range(len(State[0])):
			rowMajorState[j][i] = State[i][j]

	newRowMajorState = [[0 for val in row] for row in State ]

	for i, row in enumerate(rowMajorState):
		newRowMajorState[i] = matrixMult(colBox, row)

	for i in range(len(State)):
		for j in range(len(State[0])):
			State[i][j] = newRowMajorState[j][i]

	return State



def _mult( byte1, byte2): 
	sum = 0b00000000
	toBeXored = byte2
	for i in range(8):
		if (byte1 & 0b00000001) == 0b00000001:
			sum = sum ^ toBeXored

		toBeXored = _xtime(toBeXored)
		byte1 = byte1 >> 1

	return sum


def _rot( word): 
	wordForRotate = collections.deque(word)
	wordForRotate.rotate(-1)
	return list(wordForRotate)


def _shiftRows( State):
	for rowNumber, row in enumerate(State):
		rowForRotate = collections.deque(row)
		rowForRotate.rotate(-rowNumber)
		State[rowNumber] = list(rowForRotate)

	return State

def _subBytes( State): 
	for i, row in enumerate(State):
		for j, value in enumerate(row):
			State[i][j] = sBox[value]

	return State


def _subWord( word): 
	for i, byte in enumerate(word):
		word[i] = sBox[byte]
	return word

def _xtime( byte): 
	shiftedB = byte << 1
	if (shiftedB & 0b100000000) == 0b100000000:
		shiftedB = shiftedB ^ 0b100011011;

	return shiftedB;

expandedKey = expandKey(shared_key, Nk)
